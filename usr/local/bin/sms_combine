#!/usr/bin/awk -f

# BEGIN block: Initialize script settings and log header
BEGIN {
    RS = "\n\nMSG: "
    FS = "\n"
    ref_num = 100
    ERROR = 1
    INFO = 2
    DEBUG = 3
    # Handle LOGLEVEL: Convert string input (DEBUG, INFO, ERROR) to numeric value
    # Map to corresponding numeric value; default to INFO (2) if empty or invalid
    if (LOGLEVEL == "ERROR") LOGLEVEL = ERROR
    else if (LOGLEVEL == "INFO") LOGLEVEL = INFO
    else if (LOGLEVEL == "DEBUG") LOGLEVEL = DEBUG
    else LOGLEVEL = INFO
    plog(DEBUG, "MSG,Sender,Timestamp,Reference,Part,Total,Content")
}

# plog: Log messages based on log level
# Parameters:
#   level: Numeric log level (ERROR=1, INFO=2, DEBUG=3)
#   message: Message to log
function plog(level, message) {
    if (level <= LOGLEVEL) {
        if (level == ERROR) {
            print "[ERROR] " message > "/dev/stderr"
        } else if (level == INFO) {
            print message
        } else if (level == DEBUG) {
            print "[DEBUG] " message
        }
    }
}

# swap: Swap elements at indices i and j in array A, and in B
# Parameters:
#   A: Primary array (always swapped)
#   B: Secondary array (always swapped)
#   i, j: Indices to swap
#   t: Temporary variable for swapping
function swap(A, B, i, j, t) {
    t = A[i]; A[i] = A[j]; A[j] = t
    t = B[i]; B[i] = B[j]; B[j] = t
}

# qsort: Quicksort implementation to sort array A (and B)
# Parameters:
#   A: Array to sort (e.g., parts, timestamps)
#   B: Array to mirror swaps (e.g., refs)
#   left, right: Range of indices to sort
#   i, last: Loop counter and partition index
function qsort(A, B, left, right, i, last) {
    if (left >= right) {
        return
    }
    pivot_idx = left + int((right - left + 1) * rand())
    swap(A, B, left, pivot_idx)
    last = left
    for (i = left + 1; i <= right; i++) {
        if (A[i] < A[left]) {
            last++
            swap(A, B, last, i)
        }
    }
    swap(A, B, left, last)
    qsort(A, B, left, last - 1)
    qsort(A, B, last + 1, right)
}

# debug_info: Log contents of all dictionaries for debugging
function debug_info() {
    plog(DEBUG, "Dictionaries:")
    plog(DEBUG, "h_msg:")
    for (ref in h_msg) {
        plog(DEBUG, ref ": " h_msg[ref])
    }
    plog(DEBUG, "h_sender:")
    for (ref in h_sender) {
        plog(DEBUG, ref ": " h_sender[ref])
    }
    plog(DEBUG, "h_timestamp:")
    for (ref in h_timestamp) {
        plog(DEBUG, ref ": " h_timestamp[ref])
    }
    plog(DEBUG, "h_part:")
    for (ref in h_part) {
        plog(DEBUG, ref ": " h_part[ref])
    }
    plog(DEBUG, "h_total:")
    for (ref in h_total) {
        plog(DEBUG, ref ": " h_total[ref])
    }
    plog(DEBUG, "h_content:")
    for (key in h_content) {
        plog(DEBUG, key ": " h_content[key])
    }
}

# Main block: Process each SMS message record from stdin
{
    msg = $1
    if (NR == 1) {
        sub(/^MSG: /, "", msg)
    }
    sender = ""
    timestamp = ""
    reference = ""
    part = 1
    total = 1
    content = ""

    # Parse record fields (From, Date/Time, Reference, SMS segment, content)
    for (i = 2; i <= NF; i++) {
        if (i == 2 && $i ~ /^From: /) {
            sender = $i
            sub(/^From: /, "", sender)
        }
        else if (i == 3 && $i ~ /^Date\/Time: /) {
            # Extract and reformat timestamp (e.g., MM/DD/YY HH:MM:SS to YYYY/MM/DD HH:MM:SS)
            timestamp = $i
            sub(/^Date\/Time: /, "", timestamp)
            if (timestamp ~ /^[0-1][0-9]\/[0-3][0-9]\/[0-9]{2} [0-2][0-9]:[0-5][0-9]:[0-5][0-9]$/) {
                split(timestamp, t, /[\/ :]/)
                timestamp = sprintf("20%s/%02d/%02d %02d:%02d:%02d", t[3], t[1], t[2], t[4], t[5], t[6])
            }
        }
        else if (i == 4 && $i ~ /^Reference number: /) {
            reference = $i
            sub(/^Reference number: /, "", reference)
        }
        else if (i == 5 && $i ~ /^SMS segment [0-9]+ of [0-9]+/) {
            split($i, seg, " ")
            part = seg[3]
            total = seg[5]
        }
        else {
            content = content ? content "\n" $i : $i
        }
    }

    if (reference == "") {
        reference = "NO_" ref_num++
    }

    # Store data in sparse associative arrays
    h_msg[reference] = h_msg[reference] ? h_msg[reference] "," msg : msg
    h_sender[reference] = h_sender[reference] ? h_sender[reference] : sender
    h_timestamp[reference] = (h_timestamp[reference] == "" || timestamp > h_timestamp[reference]) ? timestamp : h_timestamp[reference]
    h_part[reference] = h_part[reference] ? h_part[reference] "," part : part
    h_total[reference] = h_total[reference] ? h_total[reference] : total
    h_content[reference ":" part] = content

    plog(DEBUG, msg "," sender "," timestamp "," reference "," part "," total "," content)
}

# END block: Process and output combined messages
END {
    # Remove trailing \n from last msg
    sub(/\n+$/, "", h_content[reference ":" part])
    plog(DEBUG, "")
    plog(DEBUG, "h_content:")
    for (ref in h_total) {
        h_combined_content[ref] = ""
        for (i = 1; i <= h_total[ref]; i++) {
            key = ref ":" i
            if (key in h_content) {
                h_combined_content[ref] = h_combined_content[ref] ? h_combined_content[ref] h_content[key] : h_content[key]
                plog(DEBUG, key ": " h_content[key])
            } else {
                plog(ERROR, "Missing part " i " for reference " ref)
            }
        }
    }
    if (DEBUG <= LOGLEVEL) { debug_info() }
    n = 0
    for (ref in h_timestamp) {
        timestamps[n] = h_timestamp[ref]
        refs[n] = ref
        n++
    }

    # Sort timestamps and mirror in refs (dual-array sort)
    qsort(timestamps, refs, 0, n-1)

    plog(INFO, "Combined Messages (sorted by timestamp):")
    for (i = 0; i < n; i++) {
        ref = refs[i]
        if (!(ref in printed)) {
            printed[ref] = 1
            plog(INFO, "Reference: " ref)
            plog(INFO, "Timestamp: " h_timestamp[ref])
            plog(INFO, "Sender: " h_sender[ref])
            plog(INFO, "Combined Content: " h_combined_content[ref])
            plog(INFO, "")
        }
    }
}
